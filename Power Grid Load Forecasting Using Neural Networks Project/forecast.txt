import numpy as np
import pandas as pd
import torch
import joblib
from config import PROCESSED_DIR, MODELS_DIR, MODEL_TYPE, INPUT_WINDOW, FORECAST_HORIZON
from models import build_model

def load_artifacts():
    scaler = joblib.load("artifacts/scaler.joblib")
    feature_cols = np.load("artifacts/feature_cols.npy", allow_pickle=True).tolist()
    model_path = MODELS_DIR / f"{MODEL_TYPE}_best.pt"
    return scaler, feature_cols, model_path

def prepare_latest_window(df, feature_cols):
    return df[feature_cols].tail(INPUT_WINDOW).values

def run_forecast():
    df = pd.read_csv(PROCESSED_DIR / "features.csv", parse_dates=["datetime"], index_col="datetime")
    scaler, feature_cols, model_path = load_artifacts()
    df[feature_cols] = scaler.transform(df[feature_cols])

    input_size = len(feature_cols)
    model = build_model(MODEL_TYPE, input_size, 128, 2, 0.2, FORECAST_HORIZON)
    model.load_state_dict(torch.load(model_path))
    model.eval()

    if MODEL_TYPE == "MLP":
        X_seq = prepare_latest_window(df, feature_cols).reshape(1, -1)
        X_t = torch.tensor(X_seq, dtype=torch.float32)
    else:
        X_seq = prepare_latest_window(df, feature_cols).reshape(1, -1, len(feature_cols))
        X_t = torch.tensor(X_seq, dtype=torch.float32)

    with torch.no_grad():
        yhat = model(X_t).numpy().flatten()

    last_ts = df.index.max()
    idx = pd.date_range(last_ts + pd.Timedelta(hours=1), periods=FORECAST_HORIZON, freq="H")
    out = pd.DataFrame({"forecast": yhat}, index=idx)
    out.to_csv("artifacts/forecast.csv")
    print(out.head())

if __name__ == "__main__":
    run_forecast()
